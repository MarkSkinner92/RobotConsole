_button
<b>Topic</b>: the ROS topic name of this publisher.

<b>Button label</b>: the text being displayed on the front of the button.

<b>Message type</b>: the ROS topic message that will be published on topic.

<b>Value to send on press</b>: when pressed, the button will send this value as parsed into message type.

<b>Value to send on release</b>: same as above, just on release.



_checkbox
<b>Topic</b>: the ROS topic name of this publisher

<b>Label</b>: the text being displayed on the side of the checkbox.

<b>Message type</b>: the ROS topic message that will be published on topic.

<b>Value to send when checked</b>: when checked, the checkbox will send this value as parsed into message type.

<b>Value to send when unchecked</b>: same as above, just on uncheck.

<b>Initial State</b>: when checked, this widget will start out checked.

<b>ROS Latching</b>: When a late subscriber connects to this widget, if latching is enabled the subscriber will recieve the current state of this widget.

_joystick
Sends a geometry_msgs/Vector3 message where X is the horizontal joystic value from -1 to 1, and Y is the vertical joystick value from -1 to 1. the Z component is not used. A message is only sent when the joystick moves.

_trigger
This widget publishes a number between 0 and 1 of how far the trigger is pressed.

<b>Message type</b>: Select either Float64 or Float32, whatever works for you.

<b>MAKE SURE THE GAMEPAD IS IN XINPUT MODE</b>: (just a little switch on the back usually)


_slider
<b>Topic</b>: the ROS topic name of this publisher.

<b>Widget Name</b>: not shown, just for organization.

<b>Min Max Step</b>: lowest value, highest value, interval of the change

<b>ROS Latching</b>: When a late subscriber connects to this widget, if latching is enabled the subscriber will recieve the current state of this widget.

<b>Default/inital value</b>: When the widget loads in, it's value will be set to this value. it will be parsed to a float.

<b>Repeat Delay</b>: number of milliseconds to wait before moving the slider again when a button/key is held down.

_inputbox
<b>Topic</b>: the ROS topic name of this publisher.

<b>Message type</b>: the ROS topic message that will be published on topic.

This widget will publish the parsed version of whatever you type into it. It will also send if you press enter.

_mouse
<b>Topic</b>: the ROS topic name of this publisher.

When you click on the white box, your mouse will be locked. You will need to hit escape to stop your mouse from being locked.

This widget publishes a vector3 message where x and y are the mouse velocities, z is the mouse button. 0 being no buttons, 1 being the left mouse button, and 2 being the right mouse button.

On the robot, you can keep track of a the mouse position by adding the velocities to a stored position vector every time a new message is recieved.

_dropdown
<b>Topic</b>: the ROS topic name of this publisher.

<b>Widget Name</b>: not shown, just for organization.

<b>ROS Latching</b>: When a late subscriber connects to this widget, if latching is enabled the subscriber will recieve the current state of this widget.

When you click on the white box, your mouse will be locked. You will need to hit escape to stop your mouse from being locked.

This widget publishes a vector3 message where x and y are the mouse velocities, z is the mouse button. 0 being no buttons, 1 being the left mouse button, and 2 being the right mouse button.

On the robot, you can keep track of a the mouse position by adding the velocities to a stored position vector every time a new message is recieved.

_value
<b>Topic</b>: the ROS topic name of this subscriber.

<b>Prefix + Postfix</b>: the incoming message will be padded with the text in these fields.

<b>Message type</b>: the ROS topic message must match the publisher.

_light
<b>Topic</b>: the ROS topic name of this subscriber.

<b>Message type</b>: Bool 

When a message comes in, the text on the widget will be replaced by the True/False label, and the color will be replaced by the True/False color.

_gauge
<b>Topic</b>: the ROS topic name of this subscriber.

<b>Label</b>: the text being displayed on the top of the gauge.

<b>Message type</b>: the ROS topic message must match the publisher.

A bold tick with a value written by it appears every <b>big tick interval</b>.

The area between big ticks are devided into <b>Subdevisions</b> ticks.

For preformance reasons, up to 200 ticks can be rendered (big ticks + small ticks <= 200). It is ok to have more, but they won't be rendered.
_rosImage
<b>Topic</b>: the ROS topic name of this subscriber.

<b>URL</b>: if a URL is present, it will act as a the default static image. If this widget recieves a ROS message and has a url image loaded, the ROS message will overwrite the image.

<b>Maintain Aspect Ratio</b>: leave unchecked if you want the image to stretch

<b>Fullscreen mode</b> if this is checked, the widget will apear behind all widgets and will be centered on screen automatically. 

<b>Z Index</b> In fullscreen mode, the image will apear behind the main video if the value is less than -50. If the value is greater than -50, it will apear in front. If you have multiple fullscreen image widgets, they can be ordered with this

_arm
<b>Topic</b>: the ROS topic name of this subscriber.

<b>Message type</b>: the ROS topic message must match the publisher.

_logger
<b>Topic</b>: the ROS topic name of this subscriber.

<b>Message type</b>: the ROS topic message must match the publisher.

<b>ROS Latching</b>: If checked, this widget will pick up the last message that were sent before the widget itself was loaded.

Stores up 4000 characters

_audio
When an Int message is recieved, a the sound of the corresponding index will play.

_serial
<b>Baudrate</b>: make sure this matches your firmware

<b>ROS to USB topic</b>: if you publish to this topic, the <b>ROS to USB appended line ending</b> will be appended to your message, and it will be sent out the serial port as characters.

<b>USB to ROS topic</b>: all serial data that makes it into the UI is stored in a buffer. When a <b>USB to ROS split with</b> character is detected, the buffer is flushed and sent out as a ROS string message which you can subscribe to on this topic.

_mic
This widget allows you to open your <b>computer microphone</b> and send data from your mic to the robot.

This widget needs the audio_common ROS package to be installed, or it will not work.

to enable the speaker pipeline on the robot, launch the audio player node with this: <code>roslaunch audio_play play.launch</code>

_speaker
When this widget is unmuted, the browser plays all incoming audio data on it's topic. This data can come from a mic on the robot.

This widget needs the audio_common ROS package to be installed, or it will not work.

you can start the mic stream on the robot by launching the audio capture node with this: <code>roslaunch audio_capture capture.launch</code>

_text
This is just for organizational purposes

_box
Any widget that is moved into a panel widget will become a child of the panel. When the panel is deleted, all children will also be deleted. When the panel is moved, all children will move with it.